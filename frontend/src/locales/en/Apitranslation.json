{
  "api": {
    "register": {
      "success": "User registered successfully.",
      "emailExists": "Email already registered.",
      "serverError": "Server error during registration."
    },
    "login": {
      "userNotFound": "User not found.",
      "invalidCredentials": "Invalid credentials.",
      "success": "Logged in successfully.",
      "serverError": "Server error during login."
    },
    "logout": {
      "success": "Logged out successfully.",
      "serverError": "Server error during logout."
    },
    "leads": {
      "fetchError": "Failed to fetch leads.",
      "createSuccess": "Lead created successfully!",
      "createError": "Error creating lead.",
      "updateSuccess": "Lead updated successfully!",
      "updateError": "Error updating lead.",
      "deleteSuccess": "Lead deleted successfully!",
      "deleteError": "Failed to delete lead.",
      "statusUpdateSuccess": "Status updated successfully!",
      "statusUpdateError": "Failed to update status.",
      "notFound": "Lead not found.",
      "notAuthorized": "Lead not found or not authorized.",
      "pendingStatusNotFound": "Pending status not found in DB.",
      "publicLeadCreateSuccess": "Lead created successfully.",
      "publicLeadCreateError": "Error creating public lead.",
      "publicLeadInvalidEmail": "Invalid secondary email format.",
      "publicLeadFullNameRequired": "Full name is required.",
      "publicLeadPhoneRequired": "Invalid phone number.",
      "publicLeadCompanyNameRequired": "Company name is required.",
      "publicLeadDuplicate": "Lead with this phone and company is already registered.",
      "publicLeadInvalidSource": "Invalid lead source.",
      "publicLeadDefaultStatusNotFound": "Default 'Sent' status not found.",
      "publicLeadInvalidFollowUpDate": "Invalid follow-up date format.",
      "publicLeadValueNotNumber": "Value must be a number.",
      "publicLeadAttachmentsGetMethod": "Attachments are not allowed with GET method. Please use POST instead.",
      "publicLeadUserIdRequired": "User ID is required.",
      "publicLeadUserNotFound": "User with provided User ID not found.",
      "statusLoadError": "Failed to load lead statuses."
    },
    "quotes": {
      "fetchSuccess": "Quotes fetched successfully!",
      "statusLoadError": "Failed to load quote statuses.",
      "historyFetchError": "Failed to load quote history.",
      "statusUpdateSuccess": "Quote status updated.",
      "notFound": "Quote not found.",
      "fetchError": "Error fetching quote.",
      "requiredFields": "User ID, Lead ID, and Title are required.",
      "createSuccess": "Quote created successfully!",
      "createError": "Error creating quote.",
      "updateSuccess": "Quote updated successfully!",
      "updateError": "Error updating quote.",
      "deleteSuccess": "Quote deleted successfully!",
      "deleteError": "Error deleting quote."
    },
    "sms": {
      "sendSuccess": "SMS sent successfully!"
    },
    "email": {
      "sendSuccess": "Email sent successfully!"
    },
    "userVariables": {
      "fetchError": "Error fetching user variables."
    },
    "statuses": {
      "fetchError": "Error fetching statuses."
    },
    "smsQuotes": {
      "missingFields": "Missing required fields for SMS quote.",
      "storeSuccess": "SMS stored successfully.",
      "serverError": "Internal server error during SMS quote processing."
    },
    "emailQuotes": {
      "missingFields": "Missing required fields for email quote.",
      "quoteNotFoundForLeadUpdate": "Quote not found for updating Lead status.",
      "serverError": "Internal server error during email quote processing."
    },
    "pricingTemplates": {
      "fetchError": "Failed to fetch pricing templates.",
      "createSuccess": "Template created successfully!",
      "createError": "Failed to create template.",
      "notFound": "Template not found.",
      "fetchByIdError": "Failed to fetch template.",
      "updateSuccess": "Template updated successfully!",
      "updateError": "Failed to update template.",
      "deleteSuccess": "Template deleted successfully!",
      "deleteError": "Failed to delete template.",
      "authError": "Authentication token not found."
    },
    "currencies": {
      "fetchError": "Failed to fetch currencies."
    },
    "pricingTemplateModal": {
      "saveSuccess": "Template {action} successfully!",
      "saveError": "Failed to {action} template."
    },
    "emailTemplates": {
      "fetchError": "Failed to fetch email templates.",
      "notFound": "Email template not found.",
      "fetchByIdError": "Failed to fetch email template.",
      "createError": "Failed to create email template.",
      "createSuccess": "Email template created successfully!",
      "updateSuccess": "Email template updated successfully!",
      "updateError": "Failed to update email template.",
      "deleteSuccess": "Email template deleted successfully!",
      "deleteError": "Failed to delete email template.",
      "authError": "Authentication token not found for email templates.",
      "saveError": "Failed to {action} email template.",
      "fileUploadError": "Failed to upload attachments.",
      "noFilesProvided": "No files provided for upload."
    },
    "smsTemplates": {
      "fetchError": "Failed to fetch SMS templates.",
      "notFound": "SMS template not found.",
      "fetchByIdError": "Failed to fetch SMS template.",
      "createError": "Failed to create SMS template.",
      "updateError": "Failed to update SMS template.",
      "createSuccess": "SMS template created successfully!",
      "updateSuccess": "SMS template updated successfully!",
      "deleteSuccess": "SMS template deleted successfully!",
      "deleteError": "Failed to delete SMS template.",
      "authError": "Authentication token not found for SMS templates.",
      "saveError": "Failed to {action} SMS template."
    },
    "variables": {
      "authError": "Authentication token not found for variables.",
      "fetchError": "Failed to fetch variables."
    },
    "offers": {
      "quoteIdRequired": "Quote ID is required",
      "offerNotFound": "Offer not found",
      "offerExpired": "This offer has expired.",
      "internalServerError": "Internal server error",
      "acceptOfferMissingFields": "Missing required fields for accepting offer.",
      "acceptedStatusNotConfigured": "Accepted status not configured in database.",
      "wonStatusNotConfigured": "Won status not configured in database.",
      "offerAcceptedSuccess": "Offer accepted successfully! Our team has been notified and the lead status is now 'Won'.",
      "offerAcceptFailed": "Failed to accept offer.",
      "questionSentSuccess": "Your question has been sent successfully! We've updated the lead status to 'In Dialogue' and notified our sales representative.",
      "questionSendFailed": "Failed to send question.",
      "offerExpiredError": "This offer has expired and cannot be accepted.",
      "offerAlreadyAccepted": "This offer has already been accepted.",
      "offerExpiredQuestion": "This offer has expired. You cannot ask questions about it.",
      "offerAlreadyAcceptedQuestion": "This offer has already been accepted. You cannot ask further questions.",
      "questionAlreadySent": "A question has already been sent for this offer. Please wait for a response from our team.",
      "termsNotAccepted": "Please accept the Terms & Conditions to proceed.",
      "noOfferData": "No offer data available."
    },
    "settings": {
      "saveSuccess": "Settings saved successfully!",
      "saveError": "Failed to save settings.",
      "logoUploadSuccess": "Logo uploaded successfully!",
      "logoUploadError": "Failed to upload logo.",
      "logoRemoveSuccess": "Logo removed successfully!",
      "logoRemoveError": "Failed to remove logo.",
      "signatureSaveSuccess": "Email signature saved successfully!",
      "signatureSaveError": "Failed to save email signature.",
      "userInviteSuccess": "User invite sent successfully!",
      "userInviteError": "Failed to send user invite."
    }
  }
}
